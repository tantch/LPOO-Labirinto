package maze.logic;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Random;

/**
 * The Class Game.
 */
public class Game implements Serializable {
	// 0-cima, 1-direita,2-baixo,3-esquerda

	private static final long serialVersionUID = 1L;

	Unit MAZE[][];

	int Height, Width, DRnum;

	Dragon[] dragons;

	Sword SW;

	Hero HR;

	Eagle EA;

	Wall WL;

	Empty EM;

	transient MazeGenerator MG;

	Exit EX;

	/**
	 * Instantiates a new game.
	 * 
	 * @param w the width of the desired map
	 * @param l the lenght of the desired map
	 * @param drag the desired number of dragons in the game
	 */
	public Game(int w, int l, int drag) {
		Height = w;
		Width = l;

		DRnum = drag;

		SW = new Sword();
		HR = new Hero();
		EA = new Eagle();
		WL = new Wall();
		EM = new Empty();
		MG = new MazeGenerator();
		EX = new Exit();
	}

	/**
	 * Sets the maze.
	 * 
	 * @param m the m
	 * @param width the width
	 * @param height the height
	 */
	public void setMaze(char[][] m, int width, int height) {

		MAZE = new Unit[height][width];

		for (int j = 0; j < height; j++)
			for (int i = 0; i < width; i++) {
				if (m[j][i] == 'X')
					MAZE[j][i] = new Unit(WL, this);
				else
					MAZE[j][i] = new Unit(EM, this);

			}
	}

	/**
	 * Starts the game.
	 */
	public void start() {

		MAZE = new Unit[Height][Width];
		dragons = new Dragon[DRnum];
		for (int i = 0; i < DRnum; i++) {
			dragons[i] = new Dragon();
		}
		MG.createMap(this);
		place(HR, 1);
		place(SW, 3);
		place(EA, 2, HR.x, HR.y);
		for (int i = 0; i < DRnum; i++) {
			place(dragons[i], 1);
		}

		print();
		
	}
	
	
	
	
	/**
	 * Changes the game to adapt to the chosen difficulty
	 * @param dif indicates the difficulty of the game
	 */

	public void setDificulty(int dif) {
		
		switch(dif){
		case 0:
			for (int i = 0; i < DRnum; i++) {
				dragons[i].move=false;
			}
			break;
		case 1:
			for (int i = 0; i < DRnum; i++) {
				dragons[i].wakeFactor=30;
				dragons[i].sleepFactor=10;
			}
		case 2:
			for (int i =0;i<DRnum;i++){
				dragons[i].wakeFactor=10;
				dragons[i].sleepFactor=30;
			}
		case 3:
			for (int i =0;i<DRnum;i++){
				dragons[i].wakeFactor=5;
				dragons[i].sleepFactor=60;
			}
		}
		
	}

	/**
	 * Prints the maze.
	 */
	public void print() {

		for (int j = 0; j < Height; j++) {
			for (int i = 0; i < Width; i++) {

				System.out.print(MAZE[j][i].getToken());

				System.out.print(MAZE[j][i].char2.token);
			}
			System.out.println();
		}
	}

	/**
	 * Places an entity in the game.
	 * 
	 * @param en the entity
	 * @param tp the character value of the entity
	 */
	public void place(Entity en, int tp) {
		Random rd = new Random();
		boolean placed = false;
		do {
			int dy = rd.nextInt(Height);
			int dx = rd.nextInt(Width);

			placed = place(en, tp, dx, dy);

		} while (!placed);

	}

	/**
	 * Places an entity in the game in the given coordinates.
	 * 
	 * @param en the entity
	 * @param tp the character value of the entity
	 * @param x the x
	 * @param y the y
	 * @return true, if successful
	 */
	public boolean place(Entity en, int tp, int x, int y) {
		if (MAZE[y][x].char1 instanceof Empty && !(en instanceof Exit)
				&& tp == 1) {

			MAZE[y][x].char1 = en;
			en.x = x;
			en.y = y;
			return true;
		}
		if (MAZE[y][x].char2 instanceof Empty && !(en instanceof Exit)
				&& tp == 2) {

			MAZE[y][x].char2 = en;
			en.x = x;
			en.y = y;
			return true;
		}
		if (MAZE[y][x].item instanceof Empty
				&& !(MAZE[y][x].char1 instanceof Wall)
				&& !(MAZE[y][x].char1 instanceof Exit) && !(en instanceof Exit)
				&& tp == 3) {

			MAZE[y][x].item = en;
			en.x = x;
			en.y = y;
			return true;
		}

		if ((en instanceof Exit)
				&& ((x == 0) || (x == Width - 1) || (y == 0) || (y == Height - 1))) {
			MAZE[y][x].char1 = en;
			en.x = x;
			en.y = y;
			return true;
		}

		return false;

	}

	/**
	 * Unplace an entity of fiven coordinates.
	 * 
	 * @param en the entity
	 * @param tp the character value of the entity
	 * @param x the x
	 * @param y the y
	 */
	public void unplace(Entity en, int tp, int x, int y) {

		switch (tp) {
		case 1:
			if (en instanceof Exit)
				MAZE[y][x].char1 = WL;
			else
				MAZE[y][x].char1 = EM;
			break;

		case 3:
			MAZE[y][x].item = EM;
			break;
		}
		en.x = 0;
		en.y = 0;

	}

	/**
	 * Checks if an Unit in given coordinates is empty or not.
	 * 
	 * @param x the x
	 * @param y the y
	 * @return true, if successful
	 */
	public boolean unitEmpty(int x, int y) {

		if (MAZE[y][x].char1 instanceof Empty) {
			return true;
		} else
			return false;
	}

	/**
	 * checks if there is any object of the type t in an adjacent space to (x,y) and if there is, saves them in an array of Par[]
	 * 
	 * @param x the x
	 * @param y the y
	 * @param t the t
	 * @return the par[]
	 */
	public Par[] near(int x, int y, Class<?> t) {
		ArrayList<Par> nums = new ArrayList<Par>();
		Par[] nms;
		if (MAZE[y - 1][x].char1.getClass() == t)
			nums.add(new Par(x, y - 1));
		if (MAZE[y][x + 1].char1.getClass() == t)
			nums.add(new Par(x + 1, y));
		if (MAZE[y + 1][x].char1.getClass() == t)
			nums.add(new Par(x, y + 1));
		if (MAZE[y][x - 1].char1.getClass() == t)
			nums.add(new Par(x - 1, y));

		nms = new Par[nums.size()];
		nms = nums.toArray(nms);
		return nms;
	}

	/**
	 * Checks if an instance of a given class is on a set of given coordinates.
	 * 
	 * @param x the x
	 * @param y the y
	 * @param t the t
	 * @param pri the pri
	 * @return true, if successful
	 */
	public boolean onTop(int x, int y, Class<?> t, int pri) {

		switch (pri) {

		case 1:
			if (MAZE[y][x].char1.getClass() == t)
				return true;
			break;
		case 2:
			if (MAZE[y][x].char2.getClass() == t)
				return true;
			break;
		case 3: // item
			if (MAZE[y][x].item.getClass() == t)
				return true;
			break;

		default:
			break;
		}
		return false;
	}

	/**
	 * Gets the maze.
	 * 
	 * @return the maze
	 */
	public Unit[][] getMaze() {
		return MAZE;
	}

	/**
	 * Action.
	 * 
	 * @param inp the inp
	 * @return the int
	 */
	public int action(String inp) {

		switch (inp) {

		case "a":
			HR.move(this, -1, 0);

			break;
		case "s":
			HR.move(this, 0, 1);

			break;
		case "d":
			HR.move(this, 1, 0);

			break;
		case "w":
			HR.move(this, 0, -1);

			break;
		case "f":
			if (getEA().able) {
				getEA().move(this, true);
			}
			break;
		case "p":
			return 0;

		default:

			break;
		}

		interact();

		if (end())
			return 0;

		return 1;
	}

	/**
	 * Move seconds.
	 */
	public void moveSeconds() {
		getEA().move(this, false);
		SW.move(this);
		for (int i = 0; i < DRnum; i++) {
			dragons[i].move(this);
		}
		interact();
	}

	/**
	 * Interact.
	 */
	public void interact() {
		for (int i = 0; i < DRnum; i++) {
			dragons[i].interact(this);
		}
		HR.interact(this);
		getEA().interact(this);
		SW.interact(this);
		EX.interact(this);

	}

	/**
	 * End.
	 * 
	 * @return true, if successful
	 */
	public boolean end() {
		if (!HR.alive) {
			return true;
		}
		if (HR.onExit) {
			return true;
		}
		return false;
	}

	/**
	 * On exit.
	 * 
	 * @param x the x
	 * @param y the y
	 * @return true, if successful
	 */
	public boolean onExit(int x, int y) {
		if (x == EX.x && y == EX.y)
			return true;
		else
			return false;
	}

	/**
	 * Gets the height.
	 * 
	 * @return the height
	 */
	public int getHeight() {
		return Height;
	}

	/**
	 * Sets the height.
	 * 
	 * @param h the new height
	 */
	public void setHeight(int h) {
		Height = h;
	}

	/**
	 * Gets the width.
	 * 
	 * @return the width
	 */
	public int getWidth() {
		return Width;
	}

	/**
	 * Gets the d rnum.
	 * 
	 * @return the d rnum
	 */
	public int getDRnum() {
		return DRnum;
	}

	/**
	 * Gets the ea.
	 * 
	 * @return the ea
	 */
	public Eagle getEA() {
		return EA;
	}

	/**
	 * Sets the ea.
	 * 
	 * @param eA the new ea
	 */
	public void setEA(Eagle eA) {
		EA = eA;
	}

	/**
	 * Start base.
	 */
	public void startBase() {
		MAZE = new Unit[Height][Width];
		dragons = new Dragon[DRnum];
		for (int i = 0; i < DRnum; i++) {
			dragons[i] = new Dragon();
		}

		for (int j = 0; j < Height; j++)
			for (int i = 0; i < Width; i++) {
				if (j == 0 || i == 0 || j == Height - 1 || i == Width - 1)
					MAZE[j][i] = new Unit(WL, this);
				else
					MAZE[j][i] = new Unit(EM, this);

			}

		print();

	}

	/**
	 * Gets the wl.
	 * 
	 * @return the wl
	 */
	public Entity getWL() {
		return WL;
	}

	/**
	 * Gets the em.
	 * 
	 * @return the em
	 */
	public Entity getEM() {
		return EM;
	}

	/**
	 * Gets the hr.
	 * 
	 * @return the hr
	 */
	public Hero getHR() {
		return HR;
	}

	/**
	 * Gets the dr.
	 * 
	 * @param i
	 *            the i
	 * @return the dr
	 */
	public Entity getDR(int i) {
		return dragons[i];
	}

	/**
	 * Gets the sw.
	 * 
	 * @return the sw
	 */
	public Sword getSW() {
		return SW;
	}

	/**
	 * Gets the exit.
	 * 
	 * @return the exit
	 */
	public Entity getEX() {
		return EX;
	}

	/**
	 * Sets the ex.
	 * 
	 * @param ex
	 *            the new ex
	 */
	public void setEX(Exit ex) {
		EX = ex;
	}

	/**
	 * Checks if is path clear.
	 * 
	 * @return true, if is path clear
	 */
	public boolean isPathClear() {
		if (HR.armed && dragonsDead())
			return true;
		return false;
	}

	/**
	 * Dragons dead.
	 * 
	 * @return true, if successful
	 */
	boolean dragonsDead() {

		for (int i = 0; i < DRnum; i++) {
			if (!dragons[i].slayn)
				return false;
		}

		return true;
	}

	/**
	 * Sets the drnum.
	 * 
	 * @param i
	 *            the new drnum
	 */
	public void setDrnum(int i) {
		DRnum = i;

	}

	/**
	 * Sets the width.
	 * 
	 * @param i
	 *            the new width
	 */
	public void setWidth(int i) {
		Width = i;

	}

	/**
	 * Gets the dragons.
	 * 
	 * @return the dragons
	 */
	public Dragon[] getDragons() {
		return dragons;
	}

	/**
	 * Sets the dragons.
	 * 
	 * @param drs
	 *            the new dragons
	 */
	public void setDragons(Dragon[] drs) {
		dragons = drs;
	}

	/**
	 * Sets the hr.
	 * 
	 * @param hero
	 *            the new hr
	 */
	public void setHR(Hero hero) {
		HR = hero;

	}

	/**
	 * Sets the sw.
	 * 
	 * @param sw
	 *            the new sw
	 */
	public void setSW(Sword sw) {
		SW = sw;
	}

}
